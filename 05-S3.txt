S3 is an object based storage system
S3 bucket is a container for objects; AWS fully managed, fully scalable
you can access the bucket object by URL (https), the URL format maybe
https://<bucket>.s3.<aws-region>.amazonaws.com/<key>
https://s3.<aws-region>.amazonaws.com/<bucket>/<key>
<bucket> is bucket name, <aws-region> is the aws region name, <key> is the object name (the value is the content of the file)
Use Restful API to access the S3 bucket
S3 bucket name must be unique gobally
S3 bucket is located in a selected region; that is your data is in a specify region
No Hierarchy for objects within a bucket; you should included a folder like structure in the name (key) of the file; eg animals/dog.txt (animals/dog is the name/key of the file); all the object in S3 are in the same level
Bucket can't inside the other bucket. 
S3 is public facing, you can access it through internet; you can use S3 gateway endpoint in VPC to make a secure connect to S3 (just like intranet)

There are many storage class in S3 (standard, intelligent tiering, stardard-IA, One Zone-IA, Glacier, Glacier Deep Archive)
Standard - default
intelligent tiering - move data for you between stroage classes based on access patterns
standard IA - standard infrequently access
One zone ia - infrequently access data but it's only stored in one availability
Glacier - for archiving
Glacier deep archive - for archiving
all with eleven 9 durability - 99.999999999%
Data availability may due to network error but not the harddrive failure 
There are minimum storage during chrage for all storage class except the standard package (it may take 30 days ~ 180 days min. charge depends on differnt classes)
Retrieval fee for cold storage is expensive
S3 Storage class selection is an art between cost, data access frequency
S3 is a region wise service but the actual storage is in a specific region

[HOL] Create Amazon S3 Bucket: S3 Dashboard, create bucket -> give bucket name, select a region (public access is blocked by default, you can add select encryption for data) -> Done
You can back to S3 and upload file to the S3 bucket that you just created; after selected the file, you can speicfy the property of that file, you can select storage class here (eg. standard, Glacier, etc), click upload -> each uploaded file will have it's unique URL


============================================================================================================================================================
************************************************************************************************************************************************************
Access Control of S3: IAM policies, bucket policies and access control lists (ACL) 

IAM policies it talking about user and role; IAM policy directly apply the permissions to the principal (user, group, role), 
Bucket Policies are resource-based policies; directly attach the policy to S3 bucket;
ACL is an old (legacy) way to secure the bucket; it's recommand to use IAM or Bucket policies; ACL can attach to bucket or an object; 
Authorization Process: Decision starts at deny; explicit deny then deny; explicit allow then allow; if not specify then deny (simily speaking you must give an allow otherwise all are deny)
Remark: S3 is defualt Block Public Access, you must disable it then apply the permission (ACL, Bucket and IAM policy). Otherwise it override everything (because it's an explicitly deny)
************************************************************************************************************************************************************
============================================================================================================================================================


[HOL] Access Control List (better to use bucket and user policy) -> goto the created S3 Bucket -> Permission -> Block public access, deselect block all public access -> goto Permission, Edit Object Ownership, ACLs Enabled -> goto Permission, Edit ACLs (leave it as defualt just take a look, no need to enable anythings here)(edit this to control the overall access on S3 BUCKET LEVEL)
ACL on object level -> Goto S3 and select an object (any file maybe an image file) -> click the permission tab of the object -> Edit the permission (OBJECT LEVEL)
The other way is goto S3 select an object -> Actions, Make Public via ACL -> Done (shortcut; setting the same things as above; it grant permission in OBJECT LEVEL)
Remark: if Block Public Access is disabled, you are not allow to edit the ACL; 
Remark: Block Public Access has an option -> "Block public access to buckets and objects granted through any access control lists (ACLs)". Therefore you must disable it to allow editing the ACL.


[HOL] Bucket and User Policy 
In root account, create a bucket and upload some images (don't set any permission at this moment)
In root account setup user accounts (username = ryan); use this non S3 permission account and login to the console, you will see that no permisson to access the S3 bucket
In root account, back to user account, select the user ryan, add permissions (you can choose "add inline policy" and edit the json)
Now use ryan to login to the console and reload the S3 bucket, you will find that the S3 dashboard is accessible by ryan (CRUD actions allowed depends on the S3 permission you grant to ryan)
In root account, goto S3, select a bucket, Permissions (no need to care about Block public access, just let it to be disable public access), edit the Bucket Policy 


[HOL] My Lab on Bucket Policy
Create a new S3 Bucket, upload some images (no permission set at this moment)
Goto the S3 Bucket, Permissions, disable "Block public access"; THE BLOCK PUBLIC ACCESS IS THE BIG DOOR TO BLOCK EVERYTHING; you must remove it otherwise even ACL, Use Policy and Bucket Policy allowed, the Block Public Access will reject everything because it's explicitly tell S3 to deny
Next goto the S3 Bucket, Permissions, Edit the Bucket Policy with the following (ryan-98760000 is the bucket name, plase update it accordingly):
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::ryan-98760000/*"
        }
    ]
}
After that everything inside the bucket is publicly available.
