Serverless means don’t have manage anything underneath the platform; you don’t need to care about the loading (it will automatically adjusted for you), no need to manage EC2, no need to install patches or update software;  Serverless services includes Lambda (run compute functions), SNS, SQS, API Gateway.

Serverless Services and Event-Driven Architecture; you can have serverless compute, storage, database services; you don't manage it the service can scale seamelessly; event drivern, e.g., upload file to S3 -> S3 use event notification to trigger lambda function to process the file -> lambda update the file and store in othehr s3 bucket -> at the same time Lambda can trigger the SQS Queue -> use the other lambda function to consume the SQS Queue -> the other lambda function process the data and store it to theh DynamoDB

AWS Lambda is a serverless compute service which runs function; upload your code to lambda and wait for something to trigger that function; pay for execution time and the allocated resource only; functions execution can run up to 15 minutes (can't run function more that 15 mins run time); Use case: data processing, file processing, event source mapping (map data from one service to the other service, eg. S3 to SQS); Lambda function can run concurrently, that is one lambda function which trigger by N events at theh same time, then N lambda function with the same code can run concurrently;

[HOL] Create Simple Lambda Function: (run a function in Lambda and trigger CloudWatch Logs - in this lab, no CloudWatch, trigger or destination are need to set; cloudwatch will auto associated with Lambda by default)
Goto the Lambda Dashboard, Click Create Function; The function can created from Scratch, Use a Blueprint, Container Image, serverless app repository; in this exercise we choose start from scratch, give it a name, use a run time (eg. Nodejs, Python), set permission (espeically if need to work with other AWS services) by create a new role with basic lambda permissions OR use exisiting role OR create a new role from AWS policy template; then goto the function page, at the top you can see the function, on the left there is an "Add trigger" button (add source like S3, SQS), on the right there is an "Add destination" button; 
In the function page, scroll down and click the code tab, you can edit the code or upload the code from .zip file or AWS s3 location; 
In the function page, scroll down and click the Test tab, play around the Test; 
In the function page, scroll down and click the Monitor tab, click View logs in CloudWatch; then it will jump to the CloudWatch, inside CloudWatch, click logs, log groups, then you can see something about thhe logs from Lambda; CloudWatch is auto attached in the Lambda
In the function page, scroll down and click Configuration tab, click Permissions, check the execution role, resource summary and play around it

Application Integration Services Overview:
They include, SQS, SNS, Step Functions, Simple Workflow Service, Amazon MQ, Amazon Kinesis (SQS, SNS, Step Functions are the most important)
Amazon Kinese can be considered as integration services but it also an analytic service
SQS = message queue; SNS = notification; Step Functions = coordinations of AWS service component;
Simple Workflow Service = old version of step function; use case: automated flow enable by the code, then you need human interaction and no code it needed, then after human finish the the process manually, you put it back to the automated flow
Amazon MQ is similar to SQS; use case: use theh Active MQ and RabbitMQ and want to shift the services to AWS cloud can consider Amazon MQ; because Amazon MQ use Active MQ and RabbitMQ for the service
Amazon Kinesis is a service that collects, processes, and analyzes data


Amazon SQS can decouple the applications; Two type of Queues, each has it's advtange and disadvantage
Standard Queue: Best-effor ordering; Unlimited Throughput; At least once delivery (beware if your application is sensitive to receive the same message twice)
FIFO Queue: First in First out ordering; High Throughhput; Exactly once processing
Dead Letter Queue (not a queue type) is used to store the message which cannot process successfully; it's store for analysis later;
Delay Queue (not a queue type) is used to store in the queue and delay for N seconds before the consumer (eg. Lambda) can see it;
Long Polling waits for theh WaitTimeSeconds and elemenates empty responses (can reduce the number of API call, but not the fastest response)
Short Polling just checks a subset of servers and may not return all messages (faster response but more API calls)


Amazon SNS Publisher sends one message to one SNS topic and the subscribers can read the notifications
Subscribers can be Lambda, SQS, Web Applications


[HOL] Simple Event-Driven App: (use CLI send command to SQS, once the message add to the queue, SQS will trigger the Lambda and write the results to DynamoDB, the Lambda will also trigger the CloudWatch Logs) (refer to the Code>Simple-Event-Driven-App>Introduction.md)
1. goto DynamoDB, click Create table, give the name, set Partition key = ProductVisitKey
2. goto Simple Queue Service, click Create queue, select Standard Queue, give theh name as ProductVisitsDataQueue, keep default access poicy, done -> copy thhe SQS URL for later use
3. goto Lambda, click Create function, select Author from scratch, set function name = productVisitsDataHandler, runtime = nodejs 12.x, Execution rule = Create a new role from AWS policy templates, role name = lambdaRoleForSQSPermissions, Policy templates = "Simple microservice permissions" and "Amazon SQS poller permissions", click Create function; upload the zip file for the lambda function, 
4. go back to Amazon SQS, select the just created SQS, scroll down and select theh Lambda triggers tab, just browse around
5. goto CLI and use command to send messsage to SQS
6. back to Amazon SQS, click Send and review messages, you can see a message under Messages section, you can click "Pull for messages" which will refresh from the queue in case there are new messages, 
7. in the Amazon SQS, goto the created SQS, scroll down, click Lambda triggers tab, click Configure Lambda function trigger button, select the Lambda function by choosing the just created Lambda function, then click save, this will trigger the lambda function when SQS got new message, 
8. in Amazon SQS, goto the created SQS, scroll to theh top, click Send and recive messages button, after sending, you call click the Poll for messages button
9. goto the DynamoDB, you can see record is added by the Lambda function, as SQS linkup with Lambda, and theh Lambda function already run by the code which will write the data to the dynamoDB; 
10. goto CloudWatch, select Log groups, you will also see the logs "/aws/lambda/productVisionDatahandler" ("/aws/lambda/<function-name>"); the CloudWatch has the new record is becauae the code inside the Lambda trigger this happen 

AWS Step Functions is a service that coordinates the components of an application; just like a state machine to trigger different lambda functions;

[HOL] Create a State Machine (come back later)
1. goto AWS Step Functions dashboard, click Get started, you can see a Review Hello World example (with code and visual state machine), leave remainging as default and click Create state machine,
2. goto Lambda, Create Function, give the function name, runtime=nodejs12, role=Create a new role with basic Lambda permissions; edit the lambda function;


Amazon EventBridge is a serverless event bus; useful for building distributed event-driven applications; Services like AWS Services, Custom Apps send events (eg. EC2 termination) to the EventBridge event bus, EventBridge process information by rules, base on those rules the information will send through various destinations like SNS, Lambda, Kinesis data streams

[HOL] Create Event Bus and Rule; (EC2 terminate and trigger an event, this event goto EventBridge and trigger the SNS)
Step1: Launch an EC2 instance, copy the instance ID to the clipboard
Step2: Goto EvenBridge Dashboard, [Set Event] click Create rule, give a name, choose Event pattern,  set Event matching pattern = Pre-defined pattern by service, set Service Provider = AWS, set Service Name = EC2, set Event type = EC2 instance State-change Notification, set Specific state(s) = terminated, set Specific instance (ids) = copied instance ID (can add as many as you need); [Set Target] set target as SNS, select a Topics (if no topic goto SNS to create it) -> DONE; 
Step3: go back to EC2 and terminate the instance and check email to see if receive the notification


API Gateway is a service that you can use to create API; support restful APIs and web socket APIs;  API Gateway act as a front door for AWS Lambda, EC2 in private subnet; treat API gateway as a single endpoint which connect to various internet base services, but not open several API services and expose several endpoints to the external world; API Gateway can modify the information in the request; API Gateway can also provide cache function; API gateway can control the limit of requests; 


[HOL] Simple REST API:
Goto API Gateway Dashboard, select a REST API, in Create new API select Example API, the Endpoint types select Regional, then click Import; “/“ is the resource, “/Get” is method, select the method and click Actions, Create Method; after adding the method, click Actions, click Deploy API, after deploy it will generate an API path; you can try the API path in the browser
Back to the API gateway dashboard, select the API just created, scroll down and you will see a Settings tab (can enable cache, throttling, encryptions, TTL, ), 





======================================================================================================================
The following are my Test

<<1>>
SNS trigger Lambda Hello World
Step 1. Create an SNS topic (with most setting by default), Create a subscription, confirm email subscription, Publish message (for testing)
Step 2. Create a Lambda Function; Use a blueprint, search sns blueprint, associate the SNS trigger to the just created SNS; 
Step 3. goto the SNS to publish message; then goto the lambda function, monitor tab click view logs in cloudwatch

// the following is generated from the blueprint
exports.handler = async (event, context) => {
    //console.log('Received event:', JSON.stringify(event, null, 2));
    const message = event.Records[0].Sns.Message;
    console.log('From SNS:', message);
    return message;
};

The other way to acheive the same effect
Step 1. Create an SNS topic (with most setting by default), Create a subscription, confirm email subscription, Publish message (for testing)
Step 2. Create a Lambda Function; Author from scratch; in the function overview, click Add tigger and associate the SNS
Step 3. goto the SNS to publish message; then goto the lambda function, monitor tab click view logs in cloudwatch

REMARK: when you add the trigger (eg. sns) to Lambda, the Lambda will auto give the permission to the trigger (SNS) 
======================================================================================================================
The following are my Test

S3 trigger lambda
Step 1. create an S3 (with default setting)
Step 2. create a Lambda Function (with default setting), Add trigger, select the bucket just created and select "All object create event" (other options are put, post, copy, multipart upload)
Step 3. goto S3 upload a file; back to Lambda, monitor, View logs in CloudWatch

======================================================================================================================
The following are my Test

Lambda trigger SNS
Step 1. Create SNS (use default setting), create Subscription
Step 2. Create a Lambda Function, Author from scratch, Add destination and link it to the SNS just created and set the condtion = "On success" (when you add the destination, AWS will attemp to add the permission role automatically)
Step 3. Update the Lambda Function code as the following then deploy it (in the code update the SNS TopicArn = the ARN of the just created SNS)
* Remark: Input (trigger) to Lambda can be any event, then the Lambda will process this event
          outout (destination) from Lambda need to have a code to do specific action, like publish an SNS as the following
          if the dstination is S3, the Lambda function need to update accordingly


var AWS = require("aws-sdk");
exports.handler = function(event, context) {
    var eventText = JSON.stringify(event, null, 2);
    console.log("Received event:", eventText);
    var sns = new AWS.SNS();
    var params = {
        Message: eventText, 
        Subject: "Ryan Test",
        TopicArn: "arn:aws:sns:ap-east-1:864996340542:ryantopic001"
    };
    sns.publish(params, context.done);
};


======================================================================================================================
The following are my Test

SQS trigger Lambda
Step 1. Create Standard SQS; test by "Send and receive messages"; in Send message, key in message then click Send message button; in Receive messages window, click Poll for messages (this will only read the message from the queue but after polling, the message still inside the SQS), select the polled message then click delete button (this will clear the message from the SQS); after a while click "Poll for messages" button, you can see the messages available count decrease
Step 2. Create a Lambda Function, Use a blueprint ~ sqs-poller, give a Role name for SQS permission, select the SQS trigger, 
Step 3. In the Lambda Function, if you see it claims the SQS is disabled; in the lambda funciton click the "Configuration" Tab, select the SQS, click the Enable button
Step 4. goto SQS and Send message; in SQS Receive messgaes, Poll for messages, you can see that the Messages available =0; this is because it's consumed by the Lambda
Step 5. Goto Lambda, Monitor tab, click View logs in CloudWatch, you can see the SQS message trigger the log



======================================================================================================================
The following are my Test

Terminate EC2 - Trigger the EventBridge - Then trigger SNS
Step 1. create an EC2
Step 2. create a SNS with Email Subscription
Step 3. (Step 3.1) goto EventBridge, click Create rule, give the name, Rule type = Rule with event pattern;
        (Step 3.2) Event source = AWS services; skip Sample event; Event pattern: Event source = EC2, Event Type = "EC2 Instance State-Change Notification", Specific state(s) = terminated, Any instance;
        (Step 3.3) Select target(s), Target types = AWS service, Select a target = SNS topic, Topic = just created SNS topic
Step 4. terminate EC2 and check email from SNS

*******
Remark: Event Bridge = bridge between events

======================================================================================================================
The following are my Test

use API Gateway to access Lambda
Step 1. Create a Lambda function with default setting (Author from scratch)
Step 2. Goto API Gateway, create REST API, Choose the protocol = REST, Create new API = New API, Give API a name
Step 3. inside the API Gateway, Actions, create resource, give resource a name, inside resource click Actions select Create Method, select Get, Integration  type = Lambda (options are Lambda, HTTP, Mock, AWS Service, VPC Link), set Lambda Function with the copied ARN (from step 1)
Step 4. back to the API Gateway, click TEST; you can see that it can trigger the API gateway


