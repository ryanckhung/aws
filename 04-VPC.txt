1. Each VPC will have it's own CIDR block. This CIDR block will use across the AZ and subnets. For example the VPC with CIDR = 10.0.0.0/16.
   Then in Zone A -> public subnet with CIDR = 10.0.0.0/24; private subnet with 10.0.1.0/24
   Then in Zone B -> public subnet with CIDR = 10.0.2.0/24; private subnet with 10.0.3.0/24
   all CIDR must fall within 10.0.0.0/16; in other word the subnet must with the CIDR block which is the subset of the overall CIDR block address
   In AWS, CIDR block must within /16 - /24; once the CIDR is set, you can't change it, therefore need to plan carefully; 
   You can't overlap the CIDR Block between VPCs;
   CIDR Block Calculator: https://network00.com/NetworkTools/IPv4SubnetCreator/
   

2. [HOL] VPC Wizard -> VPC Service -> Launch VPC Wizard (create the VPC by Wizard; somehow automated by filling a little bit information)


======================================================================================================================================================
3. [HOL] Create a Custom VPC with subnets

General Steps: VPC -> Subnet (public/private) -> Internet Gateway -> Route Table for private and public subnet


[1] VPC -> Create VPC -> CIDR block can set at 10.0.0.0/16 as long as it's not overlap with others -> in the created VPC; select actions; edit DNS hostnames; enable it (this makes the dns hostname for the ec2 instance available) 

[2] create subnets (public/private) -> VPC dashboard -> subnets -> Create Subnet -> Select the newly created VPC, give subnet name, assign AZ, assign CIDR block (up to this moment you just created the subnet; all subnets are private subnet; you can check the route table of the subnet, base on it you can judge if it's private or public, public should forward address to internet gateway and should enable auto assign public IPv4 Address) 
* for public subnet, you need to check the subnet -> Actions -> Edit Subnet Setting -> Enable auto assign public IPv4 address; otherwise when EC2 added to the public subnet, it won't have the public IP address assigned

[3] create a internet gateway -> back to VPC dashboard and create a internet gateway -> just give a name, then internet gateway is crated -> after gateway internet gateway is created, select it and click Actions, Attach to VPC 

[4] create a route table for both the public and private -> Route tables -> Create Route Table -> assign route table name, associate it with the newly created VPC -> after route table created, select the route table, select subnet associations, click edit subnet associations
For public route table back to route table and edit the main route table with 0.0.0.0/0 point to the internet gateway

Remark:

Route table ASSOCIATE with the VPC ONLY; on the other hand it associate with the CIDR block of VPC (eg 10.0.0.0/16); after the route table is created you can associate the Route table to many created subnets like (10.0.1.0/24, 10.0.2.0/24), BUT you NEVER set the route table with 10.0.1.0/24 and 10.0.2.0/24; this imply the all the difference subnets under 10.0.0.0/16 can be internal routed; in other words all subnets (10.0.1.0/24, 10.0.2.0/24) can talk to each other

For private subnet, only have one route entry, that is route internally
For public subnet, need to add one more entry to internet gateway for it to route externally
Also for public subnet, you need to check the subnet -> Actions -> Edit Subnet Setting -> Enable auto -assign public IPv4 address; otherwise when EC2 added to the public subnet, it won't have the public IP address assigned

To create a table -> Route tables -> Create Route Table -> assign route table name, associate it with the newly created VPC -> After route table is created, select the route table, select the subnet associated with the route table -> selects the corresponding subnet -> you may also edit the routes by select the route table -> Routes tab -> edit routes -> add the 0.0.0.0/0 to internet gateway (for public access)

Try to install the EC2 in public and private subnets; 
let's the private and public EC2 to talk, this can show 10.0.0.0/16 route table can route through all the subnets (10.0.1.0/24 and 10.0.2.0/24;)
Let's externally access the public and private EC2 instance, this make sure the Internet gateway set probably
======================================================================================================================================================


4 [HOL] continue the above (continue optional setting) -> [7] Create a NAT gateway -> assign a name and MUST put it in the PUBLIC subnet, allocate Elastic IP -> [8] update the route table of the private subnet -> check the private subnet, click the Routes tab, Add Route with 0.0.0.0/0 point to NAT gateway -> [9] Create Security Group -> Assign name, assoicate with the new VPC, set in bound and out bound will all permission (all traffic go in and out) for testing purpose 


5. Security Group vs Network ACL

Security groups and Network Access Control Lists (ACLs) are two different types of firewall.
Network ACL apply in the subnet level. All traffic go through the subnet will go through the network ACL.
Security groups apply in the EC2 instance level

Security group is STATEFUL firewall. It only care about the incoming traffic; all the return traffic will be automatically allow 
ACL is a STATELESS firewall. It will check both of the incoming and out going traffic. Therefore in Network ACL you need to set both the inbound and outbound rule

Security Group you mainly concern about the Inbound Rules (but you are also allow to set the outbound rules, eg your instance will initiate an outbound traffic)
Security groups only support allow rules. If no allow, by default all are deny. You can make an explicit deny in security group.

ACL can have explicit deny and allow; Rules are process in order; once the traffic match one of the rules, it will stop there; eg. Rule 1 allow a particular traffic and Rule 2 deny this traffic immediately, because Rule 1 is allow and hit, it will stop there and ignore all the remaining traffic and allow the traffic to go (even rule 2 is deny)


6. [HOL] Config Security Group and Network ACL: 
[1] for Security Group -> EC2 Dashboard -> Create Security Group -> Assign Name, Associate with the VPC, Create Inbound / outbout rules (the source maybe an AWS instance) -> assing the created security group to the EC2
[2] for network ACL -> VPC -> Security -> Network ACLs -> Create Network ACL -> give a name and associate it with a VPC -> After created the Network ACL, select it and click the "edit inboud rules" button (the order of the rule is very important, you can sort by the rule number), associate the ACL rule with subnet by "subnet association"


