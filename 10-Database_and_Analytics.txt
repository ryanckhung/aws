Relational Database; Scale Vertically; Amazon RDS, MySQL, IBM DB2, PostgreSQL; talking about column, row, table, schema; use for operation/transaction CRUD operation
Non-Relational Database: Scale Horizontally; DynamoDB, MongoDB, Redis, Neo4j, graph database (store relationships between different people); talking about key value pairs, document; for analytical (like big data)

The data store in analytical database (NonSQL) usually come from the operational databases (SQL); Example, lots of Amazon RDS databases (for operations) copy the data to the centralised data warehouse (eg. Amazon Redshift for data analysis)

Type of database in AWS:
Database on EC2: running database in EC2, fully managed by user
Amazon RDS: AWS managed relation database
Amazon DynamoDB: AWS managed NoSQL
Amazon RedShift: Data warehouse for large volume of aggregated data
Amazon ElasticCache: Fast temporary storage for small amounts of data
Amazon EMR: Analytics workloads using the Hadoop framework

Amazon Relational Database Service (it run on EC2 but fully managed by AWS):  
You can run Amazon Aurora, MySQL, MariaDB, Oracle, Microsoft SQL Server, PostgreSQL (other than these, you need to run on EC2 by yourself)
It can scale up vertically by upgrade the hardware like CPU, memory
RDS can have disaster recovery and scaling out (horizontally) features:
Disaster Recovery: have 1 RDS Master for read and write in AZ-A, have other RDS Standby in AZ-B, master will sync to standby instance (db should set in different availability zone)
Scaling Out: 1 RDS Master and RDS Read Replica; read replicas use asynchronous replication; RDS read replica is used for scaling read (only for queries);
RDS can be encrypted and take snapshots
RDS can configure with a backup window (backup start time and duration) the backup will become the snapshot; the snapshot can be restored back; in single AZ zone, the DB will be suspension for a while for backup (in multi AZ, no suspension will happen)


[HOL] Create Amazon RDS Database: Amazon RDS, Create database -> standard create, choose engine options (eg. MySQL, MaraDB), edit name of DB, give username and password, edit DB instance (hardware), edit storage, storage autoscaling, you can edit VPC, subnet, Enable automated backups, backup retention period, monitoring, maintenance (auto upgrade for minor version) (free tire will have fewer options)
After the DB is created, select the DB and click Connectivity and Security, find the endpoint which is used to connect to the database
Since the AWS managed RDS also implemented in EC2, therefore an inbound security rule on port 3306 must be enabled
If automatic backup is enabled, you can find a snapshot is associated with the database 
Goto the Amazon RDS dashboard, Snapshots -> in the snapshots dashboard you can see the system and manual tab; system tab is auto backup the database by the AWS; you can goto Manual tab to backup manually, click take snapshot and choose the database you want to backup
Or you can back to the RDS dashboard, check the created database, click Actions, you can see Take snapshot, Create read replica, Restore to point in time,  


[HOL] Read Replicas and Multi-AZ:  
goto Amazon RDS dashboard, select the database, click Actions, Create read replica -> choose the instance specifications (hardware setting, storage type) -> Done
Back to the RDS dashboard, select a database, goto Availability & durability and select Multi-AZ deployment; updating database may course temporary shutdown, you can Scheduling of modifications by setting a time or do it immediately 
after updated to multi-az, goto the RDS click configuration tab you can see multi-az=YES and secondary zone in other AZ 
select the database again, select Actions, reboot, check the Reboot with failover; during the reboot AWS will failover to the standby RDS; you can check the Zone under configuration to check if failover to other AZ successfully


Amazon RDS Security: 
Set RDS Security Group for inbound traffic to the RDS; for EC2 which want to query the database should set and outbound traffic to RDS; you can also set SSL/TLS for EC2 and RDS transmission

[HOL] Create Encrypted Copy of RDS Database: 
You can’t directly backup an unencrypted RDS database to an encrypted RDS database, to achieve it, you need to make use of snapshot
Goto RDS, select snapshots, select an existing snapshot, select Actions, copy snapshot, give the name of snapshot, Enable Encryption
After the snapshot is created, select it and click Actions, Restore snapshot (copy the snapshot to the database), give the DB a name, 


Amazon Aurora: AWS developed more powerful on durability and scalability (AWS growing product); RDS database; Aurora is MySQL and PostgreSQL compatible; 5x faster than MySQL; has distributed, fault-tolerant, self-healing, auto scales feature (can scale to 128TB); Aurora is fault tolerance across 3 AZs, scale-out read request, can promote Aurora replica to new primary, auto scaling to add read replica (when facing high traffic on read), usually have 1 master to write (can set to have multi-master).


Aurora Options: Aurora Fault Tolerance and Aurora Replicas, Cross-Region Replica with Aurora MySQL, Aurora Global Database, Aurora Multi-Master, Aurora Serverless

When shouldn’t we use the RDS? (RDS is AWS managed SQL database)
DB type other than MySQL MariaDB, SQL Server, Oracle, PostgreSQL
RDS can’t allow you to have full access, if you need full access you should do it on EC2 by yourself


Above is SQL
============================================================================================================================================================
Reference URL: https://www.digitalocean.com/community/tutorials/understanding-database-sharding

Sharding is a database architecture pattern related to horizontal partitioning — the practice of separating one table’s rows into multiple different tables, known as partitions. Each partition has the same schema and columns, but also entirely different rows. Likewise, the data held in each is unique and independent of the data held in other partitions.
eg. id%4 - separate it into 4 databases
============================================================================================================================================================
Below is NoSQL



Amazon ElasticCache: in memory database; fully managed implementations Redis and Memcached; Elastic cache is key/value based storage; Use case is put in front of database such as RDS and DynamoDB; Elastic Cache run on EC2 instance, therefore you need to choose instance hardware; 
Application for Elastic Caches: “Application running on EC2” write data to “Amazon RDS”, these data will also load to the “Elastic Cache”; next time EC2 try to read data from ealsticahce first, if ealsticache has that piece of data, it will load to the EC2; this arrangement improve the read efficiency (simply speaking, the most often use case is used as read buffer; therefore the application should allow a tolerance on eventually consistent)
Other use case for Elastic Caches is : storing session state


[HOL] Create Elastic Cache Cluster
ElastiCache Dashboard -> Get Started Now -> Select Redis / Memcached
For Memcahced: Set hardware, set Number of Nodes (it refer to number of separated partition of data), set VPC subnet (actually the memcahced is deploy in EC2, therefore you need to set the hardware and network to use)
For Redis: you can set number of Shards, Replicas per Shard (if cluster mode enabled);  similar setting as Memcached;
Select the Cluster you just created, click Actions, modify, you can modify the node type (the hardware setting)
Select the Cluster you just created, click into the cluster, you can see there are several replica (if you have set it before); select the replica, click Action, click Promote to make it as the primary; or select primary, click Actions, click Failover Primary to make it as replica
Select the cluster you just crated, click into the cluster, Click Add Node, this can add the replica
Back to the cluster level, select a cluster, click Actions, click backup
Remark: the keys are there is a cluster level and node level; cluster level refer to all the node (primary and all replicas); node level refer to all nodes (replicas)



DynamoDB: serverless NoSQL DB; push button scaling (means don’t have downtime when scaling); horizontally scaling (that's why no downtime); Tables -> Items (rows) -> Attributes (fields); you can set TTL which automatically deleted data from database when it’s expired (use case session information); Write Capacity Units (WCU), Read Capacity Unit (RCU), these values will increase if the table size get large because it need to scan the table to get the value, the larger the table, the more the scanning time, therefore TTL can help to maintain the table size and hence reduce the WCU/RCU; 
Primary Key = Partition Key + Sort Key
NoSQL allow to add attributes (no strict definition)



[HOL] Create DynamoDB Table:
Goto DynamoDB Dashboard, Create table -> Give a name, get partition key a name, give sort key a name, choose customise settings, play around the capacity calculator, you can set the read/write capacity setting (On demand or Provisioned), select read/write capacity setting as on demand, click create table -> done
Select the created DynamoDB; click Indexes tab, you can deaf the global secondary indexes; click backup tab, you can set periodic / on demand back up features; click exports and streams, you can export the data to 
S3, you can use Kinesis data streams; click Additional settings, you can set the TTL
Back to DynamoDB dashboard, click items (you can add items by command line), you can scan the item (if there are any item exists)


DynamoDB Streams: Application write to DynamoDB Table, then the record is written to dynamoDB, then trigger a lambda function to retrieve information from stream, then trigger the CloudWatch
DynamoDB Streams captures time ordered sequence in DynamoDB and store the information in log for up to 24 hours


DynamoDB Accelerator (DAX): DAX is a service to improve the performance of DynamoDB; fully managed in memory cache for DynamoDB; improve read write performance; you don’t need to update the code if you put the DAX in front of DynamoDB (same interface as DAX and DynamoDB); 
Application connected as EC2 <-> DAX <-> DynamoDB; the EC2 will first check if it’s cached in the DAX before reaching dynamoDB; you need to set IAM role for DAX to access DynamoDB; you need to set the IAM role for EC2 for DAX and DynamoDB;
DAX vs ElastiCache: DAX optimised for DynamoDB


DynamoDB Global Tables: Global Tables is multi-region and multi master database (multi master = you can write in any DBs and it will sync up to other regions); DB in different regions will sync up asynchronously; 


[HOL] Create DynamoDB Global Table: 
DynamoDB Dashboard, Tables, select the created table, click the Global tables tab, click create replica, select the other region (eg. Region-A) -> done
Switch the region (Region-A) and check if the table is replicated in other region.
This replication will make the DynamoDB as Global Table. No matter which region’s table you updated, it will auto sync up with the other dynamoDB in all regions
You can edit the table in different regions and check the tables content and see if they are auto sync up


Amazon Redshift: data warehouse solution; Redshift is a SQL based data warehouse used for analytics applications; redshift is a relational database that used for online analytics processing (OLAP); Redshift use EC2 instances; always keeps three copy of the data; provides continuous / incremental backups; 
You can sync up a lot of source to the Redshift; for example, RDS, DynamoDB, EMR, S3, EC2, on premises
Use case: complex queries on massive collections of structured and semi-structured data
For analytics:
1. You can use a read replica for analytics; (read replicas of a RDS, this won’t affect the performance of the RDS) (simple case with 1 RDS)
2. If you have many RDS, you can first sync the data to Redshift and do the analytics




