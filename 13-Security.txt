Security can be in different level, for example:
1. talking about user login
2. talking about encryption in transit (SSL/TLS)
3. talking about encryption at rest (eg. inside database)
4. talking about server security (eg. DDoS)


AWS Directory Service allows to connect the on-premises active directories or your now directory in the cloud
KMS provide various types of encryption that you can implement using KMS
AWS Certificate Manager for SSL/TLS certificates
AWS Web Application Firewall help to protect resources from common web exploits
AWS Shield protects resources against distributed denial of service attack (DDoS)
Security Group, Network ACLs, AWS IAM also provide security


AWS Directory Service: AWS Managed Microsoft Active Directory is a fully AWS managed service
AD Connector: this is useful when you have an existing active directory in the on-premises environment; AD Connector service is going to map the Active Directory credentials (from on-premises) to IAM roles, and they give you the permissions that you need to connect to the AWS service
Simple AD: inexpensive AD compatible service with common directory features; with less features therefore it’s cheaper


Identity Federation: talking about trust relationships between multiple parties; it’s a mechanism to authorise the on-premises services to use the AWS service
Eg. User does have an identity in an on-premises directory store in  this case, using the Lightweight Directory Access Protocol, LDAP; We then have an identity provider, it’s something like the active directory federation service. On the AWS side we have STS; the mechanism will allow the client in on-premises machine to get the STS token and access the AWS service


AWS Single Sign On (SSO): trying to be able to authenticate once with the credentials and then get access to a variety of system; and hence no re-authenticate is needed; and we don’t have to supports credentials to different systems; To achieve this we need to implement the SSO and connecting to those various system;


Amazon Cognito is used for adding sing in and signup functionality to the web and mobile;  there are user pools and identity pools;
Cognito user pool is a directory for managing singing and signup for applications; it generate the JWT to the client; the client can use this JWT to access AWS services
User can also using apple, Facebook, Amazon, google account to login through the AWS Cognito services
Cognito identity pools are used to obtain temporary, limited-privilege credentials for AWS services
Use case:  step1: client access the Cognito User Pool  to get the JWT token; step2:  the client exchange the token with Cognito Identity Pool and get the AWS credentials; step3 access AWS services with the AWS credentials


===========================================================================================================================================================
===========================================================================================================================================================
Above is talking how user can access the AWS cloud with security (like login)

Below is talking about how data encrypt in transit or at rest
At rest we use KMS and CloudHSM
In transit we use AWS Certificate Manager (ACM)
===========================================================================================================================================================
===========================================================================================================================================================



Encryption Primer:
Encryption in Transit: Data is protected by SSL/TLS in transit (https connection); usually encrypted from the client to ALB, then ALB will decrypt the data and the unencrypted data will be used inside the cloud;
Encryption at Rest: unencrypted object use data encryption key to encrypt the data and stored in the encrypted bucket; when you read the data back, the data will pass through the same process and decrypts the data;
Asymmetric encryption also know as public key cryptography; message encrypted with he public key can only be decrypted with the private key; message encrypted with the private key can be decrypted with public key; example of asymmetric encryption include SSL/TLS and SSH
Symmetric encryption: use the same key for encryption and decryption


AWS Key Management Service (KMS) is used for creation and management of encryption keys; the following is copied from AWS official website:
AWS KMS is replacing the term customer master key (CMK) with AWS KMS key and KMS key. The concept has not changed. To prevent breaking changes, AWS KMS is keeping some variations of this term.

AWS KMS keys (KMS keys) are the primary resource in AWS KMS. You can use a KMS key to encrypt, decrypt, and re-encrypt data. It can also generate data keys that you can use outside of AWS KMS. Typically, you'll use symmetric KMS keys, but you can create and use asymmetric KMS keys for encryption or signing.


[HOL] Create Encryption Key:
Goto the Key Management Service (KMS), explore the AWS managed keys and you will see some of the keys associated with the services with which we’ve enabled encryption; those encryption keys created by AWS are managed by AWS; AWS will performers all the cryptographic operations for you;
Again goto the Key Management Service Dashboard, goto Customer managed keys; click Create Key; Select Symmetric or Asymmetric key; give the name; there are two type of permissions (administrative permissions and usage permissions; who can administrate the key and who can use the key); select user(s) as the key administrators (eg. Can delete the key); select user(s) with key usage permission; Done;
Delete a key is a very danger action; therefore KMS request you delete the key with few days buffer; that is if you delete the key, it will help you to keep few days before it’s really gone; 


AWS CloudHSM is another service you can use for creating and managing encryption keys;
The key big difference between KMS and CloudHSM is the CloudHSM use a dedicated hardware device
AWS CloudHSM is a cloud-based hardware security module (HSM = cloud based security module); It can offload the SSL/TLS processing from web servers; CloudHSM can help to store the private key for an issuing certificate authority; Store the master key for DB encryption; CloudHSM can store the key for KMS; CloudHSM is an AWS managed service but it’s a customer managed root of trust, while KMS is AWS managed service and AWS managed root of trust; for CloudHSM, AWS has no visibility of your encryption keys
AWS Certificate Manager (ACM) is a service that we can use for issuing certificates; those certificates are SSL/TLS certificates that we use or encryption in transit; can issue a cert with single domain, multiple domain names and wildcards; Public certificates are signed by the AWS public Certificate Authority; can import certificates from third party issuers;  

Remark: KMS/CloudHSM is used for encryption at rest, ACM is used for encryption for transit


[HOL] SSL/TLS Certificate in ACM:
Goto the Certificates Dashboard, click Request a certificate, Add domain name, you can add subdomain or more name as well; Select validation method (to validate you own the domain; you can use DNS or email validation)
Back to the Certificates Dashboard, click Import a certificate, then you can use the open SSL utility to create your own certificate material (the content), then copy the certificate body, private key and optionally the certificate chain; you can put your self-signed certificates
Goto the AWS Certificate Manager Private Certificate Authority; click Create a public CA (use to create your own certificate authority in cloud, use for issuing certificate; this used as a private certificate authority); [just click around and won’t create it]
Remark: if we put star.example.com, we would then be able to use subdomains with example.com using the same certificate and a subdomain would be something like www. 

===========================================================================================================================================================
===========================================================================================================================================================
Above is talking about encryption in transit or at rest

Below is talking about secure the server like DDos
===========================================================================================================================================================
===========================================================================================================================================================

AWS Web Application Firewall (WAF) let you create rules called web ACLs, and that means you can use those to filter traffic based on conditions (eg. IP address, HTTP headers, the body, custom URIs or against geography as well); WAF good for protecting against web exploits (eg. SQL injection and cross site scripting); WAF usually put in front of CloudFront, ALB, API gateway; Web ACLs = web access control list;  

AWS Shield is a service to protect against distributed denial of service attacks (DDoS); protect someone want to kill your services by sending a large amounts of data;
[HOL] goto WAF & Shield Dashboard, click AWS Shield, click getting started, DON’T click Subscribe to Shield Advanced (it cost 3000USD for a year) just look around it (AWS Shied has a free tier and paid tier);


Don't forget Secuity Group (secure the AWS resource) and Network ACL (secure the subnet) and IAM can be part of the securty infrastructure


In Summary:
Defense In-Depth refers to the practice of implementing security multiple layers within your application, within your infrastructure; that means even you fail in one security area within your application or infrastructure, then hopefully it’s not going to lead to any major exposure;





