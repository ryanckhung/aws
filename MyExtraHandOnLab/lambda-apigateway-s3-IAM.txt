This example will create a S3 bucket with a file filled with JSON format.
Then Lambda with correct IAM role will be used to access the S3 bucket.
The API Gateway will trigger the Lambda Function.


<Step 1> [S3 Bucket]
1. Create the S3 bucket WITHOUT setting any bucket policy.
2. Load a file with the following JSON content
   {"success":true, "data":"hello world"}
   
   
<Step 2> [IAM Role - create a policy to a specific S3 bucket and then associate it to the role]
1. Create Policy; Choose a service (S3), Actions (Read), Resources (bucket assign the ARN; enter the S3 ARN created in Step 1 &&&& check object as any),[crate a policy to allow Read a particular S3 bucket]
2. Create Role; Service (Lambda), Assign the Policy created above [associate the policy to a Role]   


<Step 3> [Create and Test Lambda]
1. Create the Lambda Function, select from Scretch, associate the role crated in Step 2, add the source code as follow, then select deploy and test it
* Remark: Lambda can be triggered by other services like: API Gateway, SNS, SQS, Cloudwatch, DynamoDB

====================================================================================================================
var AWS = require('aws-sdk');
var S3 = new AWS.S3();

// assume you have crated 'ryan-temp001' bucket and upload a file 'hello.txt'
var bucket = 'ryan-temp001';
var key = 'hello.txt';

exports.handler = function (event, context, callback) {

    const done = function (err, res) {
        callback(null, {
            statusCode: err ? '400' : '200',
            body: err ? JSON.stringify(err) : JSON.stringify(res),
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            }
        });
    };

    S3.getObject({
        Bucket: bucket,
        Key: key
    }, function (err, data) {
        done(err, err ? null : JSON.parse(data.Body.toString()));
    });
};
====================================================================================================================


<Step 4> [Create API Gateway]
1. Goto API Gateway and create the "Rest API"
2. Create new API: "New API"; API name: <any you like>
3. Back to the API page, then Actions, then Create Method (GET), then associate it to the Lambda Function and check the Lambda Proxy integration (this action will auto add permission to the apigateway to trigger the Lambda function) {after the association, you can back to the lambda page and reload it, you will see the api gateway is added}
4. Back to the API page, select GET, then in the diagram Client click "Test", then test it
5. Back to the API page, select GET, then Actions and select Deploy API, after deployment, copy the URL endpoint and paste it in browser
6. Back to the API page, select GET, then Actions and select Enable CORS






