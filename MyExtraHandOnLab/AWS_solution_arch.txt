<Domain 1>: Design Resilient Architectures
- Multi-tier solution - Base on the Access Pattern to design the architecture; eg. traffic
Do you have steady connections, or do you have peaks to consider?
Do your requests vary in size, or are they fairly consistent?
Do you need to be ready for large volumes of unexpected traffic?
When studying this area, make sure you are considering how scaling can occur at each level of your multi-tiered architecture, as well as the possible use of both horizontal and vertical scaling methods.

- High Availability and Fault Tolerance
Designing for high availability means designing for minimal downtime.
Designing for fault tolerance means designing for zero downtime.
Determine the amount of resources needed.
Determine which AWS services can be used to improve reliability.
Select highly available configurations to mitigate single point of failure, and select appropriate disaster recovery strategies.
Evaluating the needs of environments and architectures, assessing how to implement high availability and fault tolerance, and determining how and when to implement disaster recovery strategies make up the major themes for this section.

- Decoupling Mechanisms
Decoupling refers to components remaining autonomous and unaware of each other as they complete their work as part of a larger system.
Decoupling techniques: synchronous and asynchronous integration.
Synchronous decoupling involves components that must always be available for proper functionality. (eg, Load Balancer)
Asynchronous decopling involves communication between components through durable components. (eg. SQS, service can temporary offline)
Knowing how to utilize decoupling services will be incredibly important.
Decoupling services: eg. Load Balancer, Event Bridge
Serverless tools in AWS help improve decoupling mechanisms. eg. SQS, API Gateway, DynamoDB

- Resilient Storage
Define your strategy to ensure the durability of data.
Identify how data service consistency will affect operations.
Know how to implement across a variety of architectures, including hybird and no-cloud-native applications.
Storage type: Amazon Elastic Block Store, Amazon EC2 instance store, S3
Consideration: data durability, ephermeral, data interchangeably (eg. S3 and S3 Glacier), data consistency, access pattern (eg. access by global user, large file or small file), 
