https://docs.aws.amazon.com/lambda/latest/dg/lambda-python.html
https://docs.aws.amazon.com/lambda/latest/dg/python-package.html
general idea is to zip the virtual environment and add the souce code back to the same level as the package
The following is the flow copied from the AWS Document (the above URL)

0. Create the virtual environment
python -m venv venv

1. Activate the virtual environment. For example:
~/my-function$ source myvenv/bin/activate

2. Install libraries with pip.
(myvenv) ~/my-function$ pip install requests

3. Deactivate the virtual environment.
(myvenv) ~/my-function$ deactivate

4. Create a deployment package with the installed libraries at the root.
~/my-function$cd myvenv/lib/python3.8/site-packages
zip -r ../../../../my-deployment-package.zip .

5. Add function code files to the root of your deployment package.
~/my-function/myvenv/lib/python3.8/site-packages$ cd ../../../../
~/my-function$ zip -g my-deployment-package.zip lambda_function.py

* Remark: follow the above command lines to zip it. Don't use the desktop version.
This can make sure zipping the contents of the directory and not the directory itself.

6. After you complete this step, you should have the following directory structure:
my-deployment-package.zip$
  │ lambda_function.py
  │ __pycache__
  │ certifi/
  │ certifi-2020.6.20.dist-info/
  │ chardet/
  │ chardet-3.0.4.dist-info/
  ...

7. Deploy the Lambda Function
- create a lambda funciton in the management console
- upload the zip code
- edit the "Runtime Settings", telling Lambda that the hundler is lambda_function.lambda_handler (inside lambda_function.py, there is a lambda_handler function); this tell the Lmabda to look for the entry of the executable code.


==========================================================================
Sample of lambda_function.py
import requests
def lambda_handler(event, context):
    response = requests.get('http://api.dsd337.com:8081/highway_images/1')
    return response.json()
==========================================================================
Sample of test function to test the lambda_function locally (test.py)
from lambda_function import lambda_handler 
print(lambda_handler('event','context'))
==========================================================================


Others: To mount EFS to Lambda

- Add "AmazonElasticFileSystemFullAccess" permission to the Lambda execution role
Goto the create Lambda Function, "Configuration", "Permissions", "Execution role" -> select the "role", "Add permissions", "Attach policies", "AmazonElasticFileSystemFullAccess"

- To connect to a file system, you must first connect your function to the VPC where your file system runs.
Goto the created Lambda Function, "Configuration", "VPC", "Edit", Select the defualt VPC, default Subnets, default Security Groups

- Goto the created Lambda Function, select the "Configuration", then select "File Systems", "Add file system"
select the created EFS and Access Point then give the "local mount path" as "/mnt/efs" (it just an example)

- Change the EFS Linux Permission
up to this moment; lambda still doesn't have write permission; 
you need to login into linux and access the efs (create folder and change permission), "sudo mkdir folder" and "chmod  777"


- After the above process, put the lambda code as the following:
import json
import os
FILE_PATH = "/mnt/efs"
DIRECTORY = "/SYSTEM_LOG"
LOG_FILE = "/backend_log.txt"

def lambda_handler(event, context):
    fullPath = '{}{}{}'.format(FILE_PATH,DIRECTORY,LOG_FILE)
    print(fullPath)
    # please make sure you login into Linux and create folder
    # sudo mkdir SYSTEM_LOG
    # sudo chmod 777 SYSTEM_LOG

    os.system("echo hello world >> {}".format(fullPath))

    # TODO implement
    return {
        'statusCode': 200,
        'body': os.listdir(FILE_PATH)
    }

* Remark:
When you connect a function to a VPC in your account, it does not have access to the internet unless your VPC provides access. To give your function access to the internet, route outbound traffic to a NAT gateway in a public subnet. Learn more 
That means if you want to use EFS, you need to set the VPC; if you set the VPC, lambda won't have internet access; then you need to set a NAT

==========================================================================
handle timeout 
lambda function -> configuration -> General configuration -> Edit Timeout
==========================================================================

    
    
