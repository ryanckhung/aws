ECS is the AWS service that allows us to run docker containers.
ECS cluster is a logical grouping of tasks/services. (tasks in AWS is similar to pod in k8s and container in docker)
Task definition is used to describe to task. (like dockerfile or yaml in k8s)
ECR is Elastic Container Registry which store the private repositories (docker images).
ECS serices are used to maintain a desired count of tasks.

https://cloudonaut.io/ecs-vs-fargate-whats-the-difference/
Amazon ECS can have two implementation method: 1. tarditional Amazon EC2 or 2. Serverless AWS Fargate
An ECS container instance is nothing more than an EC2 instance that runs the ECS Container Agent. The EC2 instance is owned and managed by you. The instance appears in the list of EC2 instances like any other EC2 instance. The ECS Container Agent regularly polls the ECS API if new containers need to be started or stopped. Usually, you run a cluster of container instances in an auto-scaling group. ECS is free of charge. You only pay for the EC2 instances. The downside is that you have to scale, monitor, patch, and secure the EC2 instances yourself.
AWS Fargate manages the task execution. No EC2 instances to manage anymore. You pay for running tasks. That’s it. As easy as it sounds.


[HOL] Launch Task on AWS Fargate: ECS Dashboard -> Get Start -> four steps, define container and task (deploy as fargate), define service, define cluster and review -> just follow it step by step (easy) -> after created, goto clusters and select the newly created cluster -> click the tasks tab (task in AWS = container in docker), you can see the newly created task, you can keep adding tasks in -> click the newly created task copy the public IP address and put it in the browswer (assume nginx image is used)


ECS and IAM Roles: the Role set permission for EC2 to access EC2 and ECS permission. The ECS IAM task role provides permissions to the container.
ECS Instance: The container instances (task) have access to all of the permissions that are supplied to the EC2 instance metadata.
For Fargate: the IAM Task Role is applied to the the task; not in the instance level

Two type of scaling for ECS: 1. Service auto scaling 2. Cluster auto scaling
Service auto scaling is for scaling Tasks (containers). It automatically adjusts the desired task (not adding EC2 instance) count up or down using the "Application Auto Scaling" Service. It supports target tracking, step and scheduled scaling polices.
Cluster auto scaling uses a capacity provider to scale the number of EC2 cluster instances (not increase the number of tasks) using EC2 auto scaling


ECS somehow equals AWS version of k8s (ECS has AWS version of controlplane too), to become standardize, better to use EKS
EKS = Elastic Kubernetes Services
EKS control plane is provisioned for you


[Summary]
There are 2 main branch to handle docker in AWS. 
1. ECS - AWS made K8s like container management tool; it can have EC2 instance (managed by you) and Fargate (serverless); Task can be deployed in EC2 or Fargate
2. EKS - industry standard; can delploy quickly between differnt cloud platform like Google, Azure, AWS

============================================================================================================================================================
[My HOL]
Reference: https://www.youtube.com/watch?v=w-nEmKwfrx8
<Step 1> Goto ECS (in the get start page); in the main page and click “Get started” button
<Step 2> Select the container definition as nginx
<Step 3> in Task definition can edit Task memory and Task CPU
<Step 4> in Service definition enable the Load balancer for external access
<Step 5> in Cluster definition, give the cluster a name
<Step 6> Back to the created cluster; click the Services tab; select the created service; then click the Details tab and find the load balancing information, click the target group name; then it will jump to the EC2 dashboard - target group page (base on it find the entry point of the load balancer);
<Step 7> Delete the cluster when you finish the demo 



[My HOL]
<Step 1> [Create cluster]
Goto the ECS, Cluster, Create cluster
<Step 2> [Create a Task, just like create a container which specify the hardware config, but not yet deploy]
Goto the ECS, Task definitions, Create new task definition (tell which container image to use, OS, CUP, memory, add volume)
You can copy the name of the docker from docker hub (eg, ryanckhung/ryannginx_red) to create the task
<Step 3> [Deploy the Tasks into the Cluster] 
Goto the ECS, Task definitions, select the created task definitions, Deploy, "Create Service" / "Run Tasks" (you can treat "Run Tasks" as simplier version of "Create Service", Service is used to guarantee that you always have some number of Tasks running at all times.); associate it with the created cluster; you must config the networking, secruity group (eg. open port 80 for nginx)
<Step 4> Done
* Remark: Service just like tell the ECS how to deploy the tasks. Therefore when you created the Service, it will automatically add the Task for you.
* Remark: you can directly running a task without create a service





