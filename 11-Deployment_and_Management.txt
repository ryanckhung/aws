Cloud Formation: deploy infrastructure using code (like the k8s yaml file)
Elastic Beanstalk: deploy your web apps
AWS Config: manage configuration and compliance for the resources
SSM Parameter Store and AWS Secrets Manager: store secrets like database connection information
AWS Resource Access Manger: share resources with other accounts


AWS Cloud Formation: anything from VPC, EC2 to serverless application can be described in template file; this template file can be used as input for cloud formation to build the infrastructure

[HOL] Deploy Stack an Change Set: 
Goto Cloud Formation Dashboard, click create stack; if template is ready, you can upload it from local machine (the simplest form is just define an EC2 with image and machine type, no security group is needed); done -> you can goto EC2 and see something is created
To update the stack, select the just created stack, click Stack actions, select Create change set for current stack; then select Replace current template and upload the template file
Delete the stack will delete all the created resources

[HOL] Complex CloudFormation Template:
Goto Cloud Formation Dashboard, click create stack; the template can create the parameters, then you can select the parameter options in Cloud Formation Dashboard;
You can roughly create the infrastructure by using a template; after the system is created, you can edit it (eg. Security group by allowing more ports) later;
Back to cloud formation, click the templates tab, click View in Designer (you can see the system connection visually), 
 

AWS Elastic Beanstalk: deploy web application on EC2; can create environment with auto scaling, load balancer, RDS; similar to CloudFormation but scope is different; Cloud Formation is for a complex architecture while Beanstalk is for managing web applications;
User upload a zip file to the beanstalk; beanstalk will handle the remaining

[HOL] Deploy Elastic Beanstalk Web Server and Worker: 
Goto Elastic Beanstalk Dashboard, Create Application; Give the application a name, in Platform choose Node.js, under Application codes select sample application; click configure more options (you can see there is a single instance, high availability options; you can add a database, monitoring, notifications and many more things here); click create app; after created by Beanstalk, goto the beanstalk main page and select the just created beanstalk and find a URL and click it; (you can find that something is created in EC2 and Load Balancer too)
In the elastic beanstalk dashboard main page, click upload and deploy (this can deploy your own code in the created platform) 
Create a worker, goto the elastic beanstalk, click environment, click Create a new environment; select Worker environment; give an application name, give an environment name, select nodejs as platform, select Sample application; click Create environment -> done -> back to the elastic beanstalk dashboard, select environment, select the worker environment just created, there is a “View queue” link, click the “View queue” link, then it will open SQS and you swill see it auto crated 2 SQS -> done (up till now the worker can’t process the queue, but it just created the infrastructure, you need to write the code to process the queue)

Remark: key difference between the worker environment and the web app environment is that the worker environment is going to process messages from an SQS queue, and the web app environment is going to be the web frontend.

SSM Parameter Store: Systems Manager Parameter Store; store data such as passwords; 

AWS Config: used for viewing and managing theh configuration of your resource on AWS; AWS Config evaluates theh configuration against desired confguration; the configuration can store in S3;


[HOL] AWS Config Rule with Remediation: (this lab will check if an S3 is encrypted)
Goto Config Dashboard, you can see the resources that you can monitor it's configuration, eg. EC2 Security Group, Routing Table, S3, etc; 
in AWS config dashboard, click Rules, click Add rule, Add AWS managed rule, in AWS Managed Rules search S3, select "S3-bucket-server-side-encryption-enabled", click next; under Trigger select Tags (will tag the bucket later)
goto s3, select a bucket (assume it's an unencrypted S3 bucket), click Properties tab, edit tag, add the key value pair with Classification - Sensitive 
back to AWS config dashbard and continue the setting by edit the trigger tag with key value pair = Classification - Sensitive; add thihs rule
goto the just crated rule, click Actions, Manage remediation -> choose Automatic remediation action and select AWS-EnableS3BucketEncryption; Resource ID parameter set as BucketName; SSEAlgorithm=AES256; AutomationAssumeRole=<iam role> (which set as the following)
goto IAM, select Roles, Select your use case as System Manager; attach permission policy = AmazonS3FullAccess; give a name; Role is created; copy it's ARN and go back to the config and set AutomationAssumeRole=<the ARN of IAM Role>; it need the S3 full access because it need the permission to cahnge encryption status
Go back to the rule, you will find the S3 is Noncompliant (because it unencrypted); now clcick Actions and Re-evaluate; after few minutes and check for the S3, you will find that it become enable the encryption

AWS Secrete Manager: store the secrete data; the secrete can be rotated automatically; Similar to SSM Parameter Store, but SSM can't roate the secret
AWS OpsWorks: unclear, check the web
AWS Resource Access Manager (RAM): share resource across AWS accounts




